{"version":3,"sources":["genesis/core.cljs"],"mappings":"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","names":["genesis.core/pp-str","x","sb__4720__auto__","goog.string/StringBuffer","*print-newline*-orig-val__40149","cljs.core/*print-newline*","*print-fn*-orig-val__40150","cljs.core/*print-fn*","*print-newline*-temp-val__40151","*print-fn*-temp-val__40152","x__4721__auto__","cljs.pprint.pprint","genesis.core/clj->json","js/JSON","cljs.core/clj->js","genesis.core/buffer->hex-str","genesis.core/hex-str->bytes","s","cljs.core.partition","cljs.core.mapv","p__40153","vec__40154","cljs.core.nth","a","b","js/parseInt","js/Uint8Array","js/genesis","js/genesis.core","js/genesis.core.app-state","genesis.core/app-state","reagent.core.atom","genesis.core/ledger-input","cljs.core._EQ_","cljs.core/deref","genesis.core/validators-input","path","p1__40157#","cljs.core.swap_BANG_","cljs.core/assoc-in","clojure.string.split","genesis.core/extra-data","validators","data","encoded","js/module$node_modules$rlp$dist$index.encode","genesis.core/update-genesis","m","cljs.core.assoc","genesis.core/fetch-genesis-template","c__30867__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__30868__auto__","switch__30844__auto__","state_40171","state_val_40172","inst_40158","inst_40159","inst_40160","inst_40161","statearr-40173","cljs.core.async.impl.ioc-helpers/take!","inst_40163","inst_40164","cljs.core/PersistentVector","inst_40165","inst_40166","inst_40167","inst_40168","inst_40169","cljs.core.async.impl.ioc-helpers/return-chan","statearr-40174","state-machine__30845__auto__","ret-value__30846__auto__","result__30847__auto__","cljs.core/keyword-identical?","e40175","js/Object","ex__30848__auto__","statearr-40176","cljs.core.async.impl.ioc-helpers/process-exception","state__30869__auto__","statearr-40177","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs-http.client/get","genesis.core/show-genesis","temp__5733__auto__","genesis","genesis.core/show-app-state","genesis.core/start","reagent.dom.render","js/document","genesis.core/init","genesis.core/stop","js/console.log"],"sourcesContent":["(ns genesis.core\n  (:require-macros\n   [cljs.core.async.macros :refer [go]])\n  (:require\n   [cljs-http.client :as http]\n   [cljs.core.async :refer [<!]]\n   [clojure.pprint :as pp]\n   [clojure.string :as str]\n   [reagent.core :as r]\n   [reagent.dom :as rdom]\n   [\"rlp\" :as rlp]))\n\n(defn pp-str\n  [x]\n  (with-out-str (pp/pprint x)))\n\n(defn clj->json\n  [x]\n  (.stringify js/JSON (clj->js x) nil 2))\n\n(defn buffer->hex-str\n  [x]\n  (str \"0x\" (.toString x \"hex\")))\n\n(defn hex-str->bytes\n  [s]\n  (->> (partition 2 s)\n       (mapv (fn [[a b]]\n               (js/parseInt (str a b) 16)))\n       (js/Uint8Array.)))\n\n;; define your app data so that it doesn't get over-written on reload\n\n(defonce app-state\n  (r/atom\n   {:input  {:ledger-type :besu\n             :validators  []}\n    :output {:genesis nil}}))\n\n(defn ledger-input\n  []\n  [:div.control\n   [:label.radio\n    [:input {:type    \"radio\"\n             :name    \"ledger-type\"\n             :checked (= (-> @app-state :input :ledger-type) :besu)}]\n    \"Besu\"]\n   [:label.radio\n    [:input {:type    \"radio\"\n             :name    \"ledger-type\"\n             :checked (= (-> @app-state :input :ledger-type) :quorum)}]\n    \"Quorum\"]])\n\n(defn validators-input\n  []\n  (let [path [:input :validators]]\n    (fn []\n      [:div.field\n       [:label.label \"Validators\"]\n       [:div.control\n        [:input.input {:type        \"text\"\n                       :placeholder \"0x01, 0x02, 0x03, ...\"\n                       :on-change   #(swap! app-state\n                                            assoc-in\n                                            path\n                                            (str/split (-> % .-target .-value) #\", ?\"))}]]])))\n\n(defn extra-data\n  [validators]\n  (let [data    [(js/Uint8Array. 32)\n                 (mapv hex-str->bytes validators)\n                 (js/Uint8Array. 0)\n                 (js/Uint8Array. 4)\n                 []]\n        encoded (rlp/encode (clj->js data))]\n    (buffer->hex-str encoded)))\n\n(defn update-genesis\n  [m validators]\n  (assoc m :extraData (extra-data validators)))\n\n(defn fetch-genesis-template\n  []\n  (go (let [validators (-> @app-state :input :validators)\n            response   (<! (http/get \"/json/genesis.json\"))]\n        (swap! app-state\n               assoc-in\n               [:output :genesis]\n               (update-genesis (:body response) validators)))))\n\n(defn show-genesis\n  []\n  [:div.content\n   [:pre (if-let [genesis (-> @app-state :output :genesis)]\n           (let [validators (-> @app-state :input :validators)]\n             (clj->json (update-genesis genesis validators)))\n           \"Loading...\")]])\n\n(defn show-app-state\n  []\n  [:div\n   [:pre (pp-str @app-state)]])\n\n(defn start []\n  (fetch-genesis-template)\n  (rdom/render\n   [:div\n    [:form\n     [ledger-input]\n     [validators-input]]\n    [show-genesis]]\n   (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n"]}